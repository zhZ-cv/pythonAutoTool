# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SLoginWidow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file wil
# l be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import hashlib
import os
import random
import sys
import time
import uuid
import requests
from websocket import create_connection
from PyQt5 import QtCore, QtGui, QtWidgets
import webbrowser


class Ui_LoginWindow(QtWidgets.QWidget):
    def __init__(self):
        super(Ui_LoginWindow, self).__init__()
        self.setupUi(self)

    def setupUi(self, LoginWindow):
        LoginWindow.setObjectName("LoginWindow")
        LoginWindow.resize(420, 420)
        LoginWindow.setWindowIcon(QtGui.QIcon('TH.ico'))
        LoginWindow.setWindowOpacity(0.95)
        LoginWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        LoginWindow.setStyleSheet("")
        self.ACCOUNT = QtWidgets.QLabel(LoginWindow)
        self.ACCOUNT.setGeometry(QtCore.QRect(40, 100, 40, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ACCOUNT.setFont(font)
        self.ACCOUNT.setObjectName("ACCOUNT")
        self.PSW = QtWidgets.QLabel(LoginWindow)
        self.PSW.setGeometry(QtCore.QRect(40, 150, 40, 40))
        self.PSW.setFont(font)
        self.PSW.setObjectName("PSW")
        self.AccountP_3 = QtWidgets.QLabel(LoginWindow)
        self.AccountP_3.setGeometry(QtCore.QRect(40, 190, 41, 31))
        self.AccountP_3.setText("")
        self.AccountP_3.setObjectName("AccountP_3")
        self.account = QtWidgets.QLineEdit(LoginWindow)
        self.account.setGeometry(QtCore.QRect(80, 100, 300, 40))
        font = QtGui.QFont()
        font.setFamily("Èªë‰Ωì")
        font.setPointSize(14)
        self.account.setFont(font)
        self.account.setObjectName("account")
        self.account.setPlaceholderText("Áî®Êà∑Âêç")
        self.psw = QtWidgets.QLineEdit(LoginWindow)
        self.psw.setGeometry(QtCore.QRect(80, 150, 300, 40))
        self.psw.setPlaceholderText("ÂØÜÁ†Å")
        font = QtGui.QFont()
        font.setFamily("Èªë‰Ωì")
        font.setPointSize(14)
        self.psw.setFont(font)
        self.psw.setObjectName("psw")
        self.verifyCode = QtWidgets.QLineEdit(LoginWindow)
        self.verifyCode.setGeometry(QtCore.QRect(40, 250, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Èªë‰Ωì")
        font.setPointSize(10)
        self.verifyCode.setFont(font)
        self.verifyCode.setObjectName("verifyCode")
        self.verifyCode.setPlaceholderText("È™åËØÅÁ†Å")
        self.VERIFYCODE = QtWidgets.QLabel(LoginWindow)
        self.VERIFYCODE.setGeometry(QtCore.QRect(260, 250, 120, 40))
        self.VERIFYCODE.setText("")
        self.VERIFYCODE.setObjectName("VERIFYCODE")
        self.getVerifyCode = QtWidgets.QPushButton(LoginWindow)
        self.getVerifyCode.setGeometry(QtCore.QRect(270, 300, 100, 30))
        self.getVerifyCode.setFont(font)
        self.getVerifyCode.setText("Âà∑Êñ∞È™åËØÅÁ†Å")
        self.getVerifyCode.clicked.connect(self.update_photo)
        self.Login = QtWidgets.QPushButton(LoginWindow)
        self.Login.setGeometry(QtCore.QRect(40, 340, 340, 40))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 67, 99))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.NoBrush)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.Login.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Èªë‰Ωì")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.Login.setFont(font)
        self.Login.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.Login.setStyleSheet("background-color: rgb(0, 25, 66);color: rgb(255, 255, 255);")
        self.Login.setObjectName("Login")
        self.Login.clicked.connect(self.LOGIN)
        self.label = QtWidgets.QLabel(LoginWindow)
        self.label.setGeometry(QtCore.QRect(40, 380, 350, 20))
        font = QtGui.QFont()
        font.setFamily("Èªë‰Ωì")
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 0, 0);")
        self.label.setObjectName("label")
        self.widget = QtWidgets.QWidget(LoginWindow)
        self.widget.setGeometry(QtCore.QRect(60, 10, 300, 60))
        self.widget.setStyleSheet("background-color: rgb(0, 25, 66);")
        self.widget.setObjectName("widget")
        self.widget1 = QtWidgets.QWidget(LoginWindow)
        self.LoginLogo2 = QtWidgets.QLabel(self.widget)
        self.LoginLogo2.setGeometry(QtCore.QRect(110, 13, 150, 33))
        self.LoginLogo2.setStyleSheet("")
        self.LoginLogo2.setText("")
        self.LoginLogo2.setObjectName("LoginLogo2")
        jpg = QtGui.QPixmap('Logo2.png').scaled(self.LoginLogo2.width(), self.LoginLogo2.height())
        self.LoginLogo2.setPixmap(jpg)
        self.LoginLogo1 = QtWidgets.QLabel(self.widget)
        self.LoginLogo1.setGeometry(QtCore.QRect(40, 0, 60, 60))
        self.LoginLogo1.setText("")
        self.LoginLogo1.setObjectName("LoginLogo1")
        jpg = QtGui.QPixmap('Logo1.jpg').scaled(self.LoginLogo1.width(), self.LoginLogo1.height())
        self.LoginLogo1.setPixmap(jpg)
        self.label_2 = QtWidgets.QLabel(LoginWindow)
        self.label_2.setGeometry(QtCore.QRect(40, 70, 350, 20))
        font = QtGui.QFont()
        font.setFamily("Èªë‰Ωì")
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_2.setObjectName("label_2")
        self.update_photo()

        self.retranslateUi(LoginWindow)
        QtCore.QMetaObject.connectSlotsByName(LoginWindow)

    def retranslateUi(self, LoginWindow):
        _translate = QtCore.QCoreApplication.translate
        LoginWindow.setWindowTitle(_translate("LoginWindow", ""))
        self.Login.setText(_translate("LoginWindow", "Á´ãÂç≥ÁôªÂΩï"))
        self.ACCOUNT.setText(_translate("LoginWindow", "üßê"))
        self.PSW.setText(_translate("LoginWindow", "üîí"))

    def update_photo(self):
        get_photo()
        jpg = QtGui.QPixmap('captcha.jpg').scaled(self.VERIFYCODE.width(), self.VERIFYCODE.height())
        self.VERIFYCODE.setPixmap(jpg)

    def LOGIN(self):
        account = self.account.text()
        account = account.upper()
        psw = self.psw.text()
        captcha = self.verifyCode.text()
        if account == '' or psw == '' or captcha == '':
            message = 'Â∏êÂè∑ÊàñÂØÜÁ†ÅÊàñÂØÜÂåôÊàñÈ™åËØÅÁ†Å‰∏çËÉΩ‰∏∫Á©∫!'
            QtWidgets.QMessageBox.information(self.widget1, 'È™åËØÅÊÉÖÂÜµ', message)
        else:
            self.message = login(account, psw, captcha)
            QtWidgets.QMessageBox.information(self.widget1, 'ÁôªÂΩïÊÉÖÂÜµ', self.message)
            if self.message == 'ÁôªÈôÜÊàêÂäü!!!':
                self.SBBTTH = Ui_SayByeByeToTsingHuaelt(account, psw)
                self.SBBTTH.show()
                self.close()
            elif self.message == 'ÁôªÈôÜÂ§±Ë¥•ÔºåÂéüÂõ†ÔºöÂØÜÁ†ÅÈîôËØØ' or self.message == 'ÁôªÈôÜÂ§±Ë¥•ÔºåÂéüÂõ†ÔºöÈ™åËØÅÁ†ÅÈîôËØØÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•È™åËØÅÁ†Å...':
                self.verifyCode.clear()
                self.update_photo()
            else:
                pass


class Ui_SayByeByeToTsingHuaelt(QtWidgets.QMainWindow):
    def __init__(self, account, psw):
        super(Ui_SayByeByeToTsingHuaelt, self).__init__()
        self.account = account
        self.psw = psw
        self.setupUi(self)

    def setupUi(self, SayByeByeToTsingHuaelt):
        SayByeByeToTsingHuaelt.setObjectName("SayByeByeToTsingHuaelt")
        SayByeByeToTsingHuaelt.resize(1158, 750)
        SayByeByeToTsingHuaelt.setWindowIcon(QtGui.QIcon('TH.ico'))
        font = QtGui.QFont()
        font.setPointSize(10)
        SayByeByeToTsingHuaelt.setFont(font)
        self.centralwidget = QtWidgets.QWidget(SayByeByeToTsingHuaelt)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 10, 1131, 111))
        self.widget.setObjectName("widget")
        self.MainPhoto = QtWidgets.QLabel(self.widget)
        self.MainPhoto.setGeometry(QtCore.QRect(1, 4, 111, 101))
        self.MainPhoto.setText("")
        self.MainPhoto.setObjectName("MainPhoto")
        jpg = QtGui.QPixmap('Head.png').scaled(self.MainPhoto.width(), self.MainPhoto.height())
        self.MainPhoto.setPixmap(jpg)
        self.StudentName = QtWidgets.QLabel(self.widget)
        self.StudentName.setGeometry(QtCore.QRect(110, 60, 111, 51))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.StudentName.setFont(font)
        self.StudentName.setText("")
        self.StudentName.setAlignment(QtCore.Qt.AlignCenter)
        self.StudentName.setObjectName("StudentName")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(111, 0, 111, 61))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(220, 40, 91, 71))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.queryUnits = QtWidgets.QPushButton(self.widget)
        self.queryUnits.setGeometry(QtCore.QRect(310, 50, 200, 50))
        self.queryUnits.clicked.connect(self.way1)
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        self.queryUnits.setFont(font)
        self.queryUnits.setStyleSheet("")
        self.queryUnits.setObjectName("queryUnits")
        self.RUN = QtWidgets.QPushButton(self.widget)
        self.RUN.setGeometry(QtCore.QRect(730, 50, 140, 50))
        self.RUN.clicked.connect(self.Run)
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        self.RUN.setFont(font)
        self.RUN.setObjectName("RUN")
        self.Button1 = QtWidgets.QRadioButton(self.widget)
        self.Button1.setGeometry(QtCore.QRect(520, 45, 105, 30))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.Button1.setFont(font)
        self.Button1.setObjectName("Button1")
        self.Button2 = QtWidgets.QRadioButton(self.widget)
        self.Button2.setGeometry(QtCore.QRect(620, 45, 105, 30))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.Button2.setFont(font)
        self.Button2.setObjectName("SaveButton")
        self.queryProcess = QtWidgets.QPushButton(self.widget)
        self.queryProcess.setGeometry(QtCore.QRect(890, 50, 180, 50))
        self.queryProcess.clicked.connect(self.way2)
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        self.queryProcess.setFont(font)
        self.queryProcess.setObjectName("queryProcess")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(114, 159, 200))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(114, 159, 200))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.Button3 = QtWidgets.QRadioButton(self.widget)
        self.Button3.setGeometry(QtCore.QRect(520, 75, 210, 30))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.Button3.setFont(font)
        self.Button3.setObjectName("Button3")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(10, 120, 661, 571))
        self.widget_2.setObjectName("widget_2")
        self.coursesList = QtWidgets.QTableWidget(self.widget_2)
        self.coursesList.setGeometry(QtCore.QRect(0, 60, 661, 181))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(10)
        self.coursesList.setFont(font)
        self.coursesList.setStyleSheet("background:transparent;")
        self.coursesList.setObjectName("coursesList")
        self.coursesList.setRowCount(1)
        self.coursesList.setColumnCount(4)
        self.coursesList.setColumnWidth(0, 300)
        self.coursesList.setColumnWidth(1, 85)
        self.coursesList.setColumnWidth(2, 215)
        self.coursesList.setColumnWidth(3, 40)
        self.coursesList.setHorizontalHeaderLabels(['ËØæÁ®ãÂêçÁß∞', 'ÊéàËØæËÄÅÂ∏à', 'ËØæÁ®ãÂºÄÊîæÊó∂Èó¥', 'ÈÄâÊã©'])
        self.label_2 = QtWidgets.QLabel(self.widget_2)
        self.label_2.setGeometry(QtCore.QRect(1, 0, 151, 61))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(self.widget_2)
        self.label_4.setGeometry(QtCore.QRect(191, -1, 471, 61))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.unitsList = QtWidgets.QTreeWidget(self.widget_2)
        self.unitsList.setGeometry(QtCore.QRect(0, 301, 661, 270))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        self.unitsList.setFont(font)
        self.unitsList.setStyleSheet("background:transparent;")
        self.unitsList.setObjectName("unitsList")
        self.label_9 = QtWidgets.QLabel(self.widget_2)
        self.label_9.setGeometry(QtCore.QRect(0, 240, 271, 61))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setGeometry(QtCore.QRect(680, 120, 461, 571))
        self.widget_3.setObjectName("widget_3")
        self.label_5 = QtWidgets.QLabel(self.widget_3)
        self.label_5.setGeometry(QtCore.QRect(0, 250, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.HistoryEdit = QtWidgets.QTextEdit(self.widget_3)
        self.HistoryEdit.setGeometry(QtCore.QRect(3, 300, 461, 271))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(10)
        self.HistoryEdit.setFont(font)
        self.HistoryEdit.setStyleSheet("background:transparent")
        self.HistoryEdit.setObjectName("HistoryEdit")
        self.label_6 = QtWidgets.QLabel(self.widget_3)
        self.label_6.setGeometry(QtCore.QRect(170, 250, 291, 51))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_10 = QtWidgets.QLabel(self.widget_3)
        self.label_10.setGeometry(QtCore.QRect(0, 0, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.finishProcess = QtWidgets.QTextEdit(self.widget_3)
        self.finishProcess.setGeometry(QtCore.QRect(0, 50, 461, 191))
        font = QtGui.QFont()
        font.setFamily("Ê•∑‰Ωì")
        font.setPointSize(12)
        self.finishProcess.setFont(font)
        self.finishProcess.setStyleSheet("background:transparent")
        self.finishProcess.setObjectName("finishProcess")
        SayByeByeToTsingHuaelt.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SayByeByeToTsingHuaelt)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1158, 28))
        self.menubar.setObjectName("menubar")
        SayByeByeToTsingHuaelt.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SayByeByeToTsingHuaelt)
        self.statusbar.setObjectName("statusbar")
        SayByeByeToTsingHuaelt.setStatusBar(self.statusbar)
        self.QueryCourses()

        self.retranslateUi(SayByeByeToTsingHuaelt)
        QtCore.QMetaObject.connectSlotsByName(SayByeByeToTsingHuaelt)

    def retranslateUi(self, SayByeByeToTsingHuaelt):
        _translate = QtCore.QCoreApplication.translate
        SayByeByeToTsingHuaelt.setWindowTitle(_translate("SayByeByeToTsingHuaelt", ""))
        self.label.setText(_translate("SayByeByeToTsingHuaelt", "Áî®Êà∑ÂêçÁß∞\nüëá"))
        self.label_3.setText(_translate("SayByeByeToTsingHuaelt", "ÂäüËÉΩ‚öô"))
        self.queryUnits.setText(_translate("SayByeByeToTsingHuaelt", "Êü•ÁúãËØæÁ®ã‰ø°ÊÅØü§ò"))
        self.RUN.setText(_translate("SayByeByeToTsingHuaelt", "ÂÆåÊàêÈ¢òÁõÆüëä"))
        self.Button1.setText(_translate("SayByeByeToTsingHuaelt", "ÂÆåÊàêÈ¢òÁõÆ"))
        self.Button2.setText(_translate("SayByeByeToTsingHuaelt", "Ê∑ªÂä†Êó∂Èïø"))
        self.queryProcess.setText(_translate("SayByeByeToTsingHuaelt", "Êü•ËØ¢ÂÆåÊàêËøõÂ∫¶üñê"))
        self.Button3.setText(_translate("SayByeByeToTsingHuaelt", "ÂÆåÊàêÈ¢òÁõÆÂπ∂Ê∑ªÂä†Êó∂Èïø"))
        self.label_2.setText(_translate("SayByeByeToTsingHuaelt", "ÊàëÁöÑËØæÁ®ãüìö"))
        self.label_4.setText(_translate("SayByeByeToTsingHuaelt", "   üìï    üìó    üìò    üìî    üìì    "))
        self.label_9.setText(_translate("SayByeByeToTsingHuaelt", "ÈÄâ‰∏≠ËØæÁ®ãÁöÑËØæÁ®ã‰ø°ÊÅØüìñ"))
        self.label_5.setText(_translate("SayByeByeToTsingHuaelt", "ÂÅöÈ¢òËÆ∞ÂΩï‚åõ"))
        self.label_6.setText(_translate("SayByeByeToTsingHuaelt", "üïê  üïí  üïï  üïò  üïê"))
        self.label_10.setText(_translate("SayByeByeToTsingHuaelt", "ÂÆåÊàêËøõÂ∫¶üöÄ"))

    def QueryCourses(self):
        loginTime = time.strftime('%Y-%m-%d  %H:%M:%S', time.localtime(time.time()))
        studentInformation = get_studentInformation()
        self.serverTime = str(studentInformation[0])
        self.userId = str(studentInformation[1])
        self.name = studentInformation[2]
        self.schoolName = studentInformation[3]
        self.StudentName.setText(self.name)
        self.content = get_courseId(self.serverTime, self.userId)[0]
        self.m = get_courseId(self.serverTime, self.userId)[1]
        self.coursesList.setRowCount(self.m)
        self.my_thread = MyThread(self.content)
        self.my_thread.my_signal.connect(self.print_coursesList)
        self.my_thread.start()

    def print_coursesList(self, courseList):
        textbookTitle = QtWidgets.QTableWidgetItem(courseList[0])
        teacherName = QtWidgets.QTableWidgetItem(courseList[1])
        useTime = QtWidgets.QTableWidgetItem(courseList[2])
        i = courseList[3]
        self.check = QtWidgets.QTableWidgetItem()
        self.check.setCheckState(QtCore.Qt.Unchecked)
        self.coursesList.setItem(i, 0, textbookTitle)
        self.coursesList.setItem(i, 1, teacherName)
        self.coursesList.setItem(i, 2, useTime)
        self.coursesList.setItem(i, 3, self.check)

    def way1(self):
        way = 1
        self.QueryUnits(way)

    def way2(self):
        way = 2
        self.QueryUnits(way)

    def QueryUnits(self, way):
        num = []
        for i in range(self.m):
            state = self.coursesList.item(i, 3).checkState()
            if state:
                num.append(i)
            else:
                pass
        if num:
            for x in num:
                self.courseId = str(self.content[x]['id'])
                BookName = self.content[x]['textbookTitle']
                content = get_courseInformation(self.courseId, self.serverTime, self.userId)
                self.my_thread1 = MyThread1(content, way)
                if way == 1:
                    self.bookName = QtWidgets.QTreeWidgetItem(self.unitsList)
                    self.bookName.setText(0, BookName)
                    self.bookName.setCheckState(0, QtCore.Qt.Unchecked)
                    self.my_thread1.my_signal.connect(self.print_unitsList)
                elif way == 2:
                    self.my_thread1.my_signal.connect(self.QueryProcess)
                self.my_thread1.my_signal1.connect(self.allDone)
                self.my_thread1.start()
                self.unitsList.expandAll()
                self.unitsList.itemChanged.connect(self.get_units)
        else:
            message = 'ËØ∑ÂÖàÂãæÈÄâÈúÄË¶ÅÊü•ÁúãÁöÑËØæÁ®ãÔºÅÔºÅÔºÅ'
            QtWidgets.QMessageBox.information(self.centralwidget, 'ÊèêÁ§∫', message)

    def print_unitsList(self, unitsList):
        a = unitsList[0]
        title = unitsList[1]
        information = f'[UNIT.{a}]--{title}'
        item = QtWidgets.QTreeWidgetItem(self.bookName)
        item.setText(0, information)
        item.setCheckState(0, QtCore.Qt.Unchecked)

    def QueryProcess(self, unitsList):
        a = unitsList[0]
        title = unitsList[1]
        duration = unitsList[2]
        progress = unitsList[3]
        score = unitsList[4]
        information = f'*#*[UNIT.{a}]{title}*#*\n---ÂÆåÊàêÊó∂ÈïøÔºö{duration}\n---ÂÆåÊàêËøõÂ∫¶:{progress}%\n---ÂçïÂÖÉÂàÜÊï∞Ôºö{score}ÂàÜ'
        self.finishProcess.append(information)

    def get_units(self, item, column):
        count = item.childCount()
        if item.checkState(column) == QtCore.Qt.Checked:
            for f in range(count):
                if item.child(f).checkState(0) != QtCore.Qt.Checked:
                    item.child(f).setCheckState(0, QtCore.Qt.Checked)
        if item.checkState(column) == QtCore.Qt.Unchecked:
            for f in range(count):
                if item.child(f).checkState != QtCore.Qt.Unchecked:
                    item.child(f).setCheckState(0, QtCore.Qt.Unchecked)

    def Run(self):
        try:
            count = self.bookName.childCount()
            units = []
            for i in range(count):
                if self.bookName.child(i).checkState(0) == QtCore.Qt.Checked:
                    units.append(i)
                else:
                    pass
            if units:
                order = 0
                if self.Button1.isChecked():
                    order = 1
                if self.Button2.isChecked():
                    order = 2
                if self.Button3.isChecked():
                    order = 3
                if order == 0:
                    msg = 'ËØ∑ÈÄâÊã©ÂÆåÊàêÊñπÂºèÔºÅÔºÅÔºÅ'
                    QtWidgets.QMessageBox.information(self.centralwidget, 'ÊèêÁ§∫', msg)
                else:
                    content = RUN(self.courseId, self.serverTime, self.userId)
                    self.my_thread2 = MyThread2(content, units, self.courseId, self.serverTime, self.userId, order)
                    self.my_thread2.my_signal.connect(self.print_page)
                    self.my_thread2.my_signal1.connect(self.print_content)
                    self.my_thread2.my_signal2.connect(self.allDone)
                    self.my_thread2.start()
            else:
                msg = 'ËØ∑ÈÄâÊã©ÈúÄË¶ÅÂÆåÊàêÁöÑÂçïÂÖÉÔºÅÔºÅÔºÅ'
                QtWidgets.QMessageBox.information(self.centralwidget, 'ÊèêÁ§∫', msg)
        except:
            msg = 'ËØ∑ÂÖàÁÇπÂáªÊü•ÁúãËØæÁ®ã‰ø°ÊÅØÔºÅÔºÅÔºÅ'
            QtWidgets.QMessageBox.information(self.centralwidget, 'ÊèêÁ§∫', msg)

    def allDone(self, method):
        pass

    def print_page(self, List):
        m = List[0]
        n = List[1]
        title = f'-----Á¨¨{m}ÂçïÂÖÉÔºåÁ¨¨{n}È°µ-----'
        self.HistoryEdit.append(title)

    def print_content(self, STR):
        self.HistoryEdit.append(STR)


class MyThread(QtCore.QThread):
    my_signal = QtCore.pyqtSignal(list)

    def __init__(self, content):
        super(MyThread, self).__init__()
        self.content = content

    def run(self):
        m = 0
        for i in self.content:
            textbookTitle = i['textbookTitle']
            teacherName = i['teacherName']
            beginTime = str(i['beginTime'])
            beginTime = int(beginTime[0:10])
            beginTime = time.localtime(beginTime)
            beginDate = time.strftime("%Y/%m/%d", beginTime)
            endTime = str(i['endTime'])
            endTime = int(endTime[0:10])
            endTime = time.localtime(endTime)
            endDate = time.strftime("%Y/%m/%d", endTime)
            useTime = f'{beginDate}---{endDate}'
            List = [textbookTitle, teacherName, useTime, m]
            self.my_signal.emit(List)
            m += 1


class MyThread1(QtCore.QThread):
    my_signal = QtCore.pyqtSignal(list)
    my_signal1 = QtCore.pyqtSignal(int)

    def __init__(self, content, way):
        super(MyThread1, self).__init__()
        self.content = content
        self.way = way

    def run(self):
        a = 1
        for i in self.content['children']:
            title = i['title']
            progress = i['progress']
            duration = i['duration']
            score = i['score']
            List = [a, title, duration, progress, score]
            self.my_signal.emit(List)
            a += 1
        method = self.way
        self.my_signal1.emit(method)


class MyThread2(QtCore.QThread):
    my_signal = QtCore.pyqtSignal(list)
    my_signal1 = QtCore.pyqtSignal(str)
    my_signal2 = QtCore.pyqtSignal(int)

    def __init__(self, content, units, courseId, serverTime, userId, order):
        super(MyThread2, self).__init__()
        self.content = content
        self.units = units
        self.courseId = courseId
        self.serverTime = serverTime
        self.userId = userId
        self.order = order

    def run(self):
        for d in self.units:
            m = d + 1
            i = self.content[d]
            Content = get_pageId_stuKey(i, self.courseId, self.serverTime, self.userId)
            n = 1
            for a in Content:
                pageNo = a['pageNo']
                if pageNo == 1:
                    List = [m, n]
                    self.my_signal.emit(List)
                    msg1 = 'Ê≠§È°µÈù¢‰∏∫ÂçïÂÖÉÂ∞ÅÈù¢ÔºåÊó†È¢òÁõÆÔºåË∑≥ËøáÔºÅ'
                    self.my_signal1.emit(msg1)
                    n += 1
                else:
                    children = a['children']
                    for b in children:
                        children = b['children']
                        if not children:
                            progress = b['progress']
                            pageId = b['pageId']
                            stuKey = b['stuKey']
                            List = [m, n]
                            self.my_signal.emit(List)
                            if self.order == 1:
                                msg0 = 'Ê≠£Âú®Ëé∑ÂèñÁ≠îÊ°à.....'
                                self.my_signal1.emit(msg0)
                                msg = submit(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                self.sleep(3)
                                if msg == 'Á≠îÊ°àÊèê‰∫§ÊàêÂäü!!!':
                                    self.my_signal1.emit(msg)
                                else:
                                    self.my_signal1.emit(msg)
                            elif self.order == 2:
                                s = random.randint(30, 60)
                                p = round(s / 10)
                                msg1 = f'Ê≠£Âú®Ê∑ªÂä†Êó∂ÈïøÔºåÊó∂ÈïøÊ∑ªÂä†ÊØî‰æã‰∏∫1.1\nÊ≠§È°µÈúÄË¶ÅÊ∑ªÂä†Êó∂Èïø‰∏∫:{s}sÔºåÂ§ßÁ∫¶ÈúÄË¶Å{p * 10}s'
                                self.my_signal1.emit(msg1)
                                msg2 = ''
                                for q in range(p):
                                    msg2 = add_time(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                    if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                        self.sleep(10)
                                    else:
                                        break
                                if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                    self.my_signal1.emit(msg2)
                                else:
                                    self.my_signal1.emit(msg2)
                            elif self.order == 3:
                                if progress == 100:
                                    msg = 'Êú¨È°µÈù¢Â∑≤ÂÆåÊàêÔºåË∑≥Ëøá'
                                    self.my_signal1.emit(msg)
                                else:
                                    msg = submit(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                    if msg == 'Á≠îÊ°àÊèê‰∫§ÊàêÂäü!!!':
                                        self.my_signal1.emit(msg)
                                    else:
                                        self.my_signal1.emit(msg)
                                    if msg == 'Êú¨È°µÈù¢‰∏∫ÂΩïÈü≥ËØÑÂàÜÈ°µÈù¢\nÂõ†‰∏∫Ê∏ÖÂçéÁ§æÂÆòÁΩë‰∏äÁ∫ø‰∫ÜÂΩïÈü≥ÂàÜÊûê,Êú¨ËΩØ‰ª∂ÂÆûË°åÁöÑÂéüÈü≥È¢ëÊèê‰∫§ÊñπÊ°à‰ºöË¢´Âà§ÂÆö‰∏∫‰ΩúÂºäË°å‰∏∫\nÊâÄ‰ª•Êú¨È°µÈù¢Ë∑≥Ëøá‰∏çÂÆåÊàê\nËØ∑Âä°ÂøÖËá™Ë°åÂÆåÊàêÔºÅÔºÅÔºÅ':
                                        pass
                                    else:
                                        s = random.randint(30, 60)
                                        p = round(s / 10)
                                        msg1 = f'Ê≠£Âú®Ê∑ªÂä†Êó∂ÈïøÔºåÊó∂ÈïøÊ∑ªÂä†ÊØî‰æã‰∏∫1.1\nÊ≠§È°µÈúÄË¶ÅÊ∑ªÂä†Êó∂Èïø‰∏∫:{s}sÔºåÂ§ßÁ∫¶ÈúÄË¶Å{p * 10}s'
                                        self.my_signal1.emit(msg1)
                                        msg2 = ''
                                        for q in range(p):
                                            msg2 = add_time(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                            if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                                self.sleep(10)
                                            else:
                                                break
                                        if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                            self.my_signal1.emit(msg2)
                                        else:
                                            self.my_signal1.emit(msg2)
                            n += 1
                        else:
                            for c in children:
                                progress = c['progress']
                                pageId = c['pageId']
                                stuKey = c['stuKey']
                                List = [m, n]
                                self.my_signal.emit(List)
                                if self.order == 1:
                                    msg0 = 'Ê≠£Âú®Ëé∑ÂèñÁ≠îÊ°à.....'
                                    self.my_signal1.emit(msg0)
                                    msg = submit(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                    self.sleep(3)
                                    if msg == 'Á≠îÊ°àÊèê‰∫§ÊàêÂäü!!!':
                                        self.my_signal1.emit(msg)
                                    else:
                                        self.my_signal1.emit(msg)
                                elif self.order == 2:
                                    s = random.randint(30, 60)
                                    p = round(s / 10)
                                    msg1 = f'Ê≠£Âú®Ê∑ªÂä†Êó∂ÈïøÔºåÊó∂ÈïøÊ∑ªÂä†ÊØî‰æã‰∏∫1.1\nÊ≠§È°µÈúÄË¶ÅÊ∑ªÂä†Êó∂Èïø‰∏∫:{s}sÔºåÂ§ßÁ∫¶ÈúÄË¶Å{p * 10}s'
                                    self.my_signal1.emit(msg1)
                                    msg2 = ''
                                    for q in range(p):
                                        msg2 = add_time(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                        if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                            self.sleep(10)
                                        else:
                                            break
                                    if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                        self.my_signal1.emit(msg2)
                                    else:
                                        self.my_signal1.emit(msg2)
                                elif self.order == 3:
                                    if progress == 100:
                                        msg = 'Êú¨È°µÈù¢Â∑≤ÂÆåÊàêÔºåË∑≥Ëøá'
                                        self.my_signal1.emit(msg)
                                    else:
                                        msg = submit(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                        if msg == 'Á≠îÊ°àÊèê‰∫§ÊàêÂäü!!!':
                                            self.my_signal1.emit(msg)
                                        else:
                                            self.my_signal1.emit(msg)
                                        s = random.randint(30, 60)
                                        p = round(s / 10)
                                        msg1 = f'Ê≠£Âú®Ê∑ªÂä†Êó∂ÈïøÔºåÊó∂ÈïøÊ∑ªÂä†ÊØî‰æã‰∏∫1.1\nÊ≠§È°µÈúÄË¶ÅÊ∑ªÂä†Êó∂Èïø‰∏∫:{s}sÔºåÂ§ßÁ∫¶ÈúÄË¶Å{p * 10}s'
                                        self.my_signal1.emit(msg1)
                                        msg2 = ''
                                        for q in range(p):
                                            msg2 = add_time(pageId, stuKey, self.courseId, self.serverTime, self.userId)
                                            if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                                self.sleep(10)
                                            else:
                                                break
                                        if msg2 == 'Êó∂Èó¥ÁªüËÆ°ÁªìÊùüÔºÅ':
                                            self.my_signal1.emit(msg2)
                                        else:
                                            self.my_signal1.emit(msg2)
                                n += 1
            method = 3
            self.my_signal2.emit(method)


def get_photo():
    url = f"{baseUrl}user/validateCode"
    headers = {
        'User-Agent': UserAgent
    }
    response = session.get(url=url, headers=headers)
    with open("captcha.jpg", 'wb') as f:
        f.write(response.content)


def MD5(Plaintext):
    plaintext = Plaintext
    m = hashlib.md5()
    m.update(plaintext.encode(encoding='utf-8'))
    cipherText = m.hexdigest()
    return cipherText


def get_sign(C, serverTime, userId):
    i = serverTime
    o = str(uuid.uuid4())
    c = C
    u = userId
    SIGN = i + o + c + u
    sign = MD5(SIGN)
    return o, sign


def extra_url(o, userId):
    extraUrl = '&clientTime=' + o + '&diResU=' + userId
    return extraUrl


def login(account, psw, captcha):
    psw = MD5(psw)
    headers = {
        'User-Agent': UserAgent
    }
    data = {"account": account, "password": str(psw), "validateCode": f"{captcha}", "type": 1}
    url = f"{baseUrl}user/login"
    response = session.post(url=url, headers=headers, json=data)
    message = response.json()['message']
    if message == 'ok':
        msg = 'ÁôªÈôÜÊàêÂäü!!!'
    elif message == 'È™åËØÅÁ†Å‰∏çÊ≠£Á°ÆÔºåËØ∑Â∞ùËØïÂà∑Êñ∞ÂêéÈáçÊñ∞ËæìÂÖ•ÔºÅ':
        msg = 'ÁôªÈôÜÂ§±Ë¥•ÔºåÂéüÂõ†ÔºöÈ™åËØÅÁ†ÅÈîôËØØÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•È™åËØÅÁ†Å...'
    elif message == 'ÁôªÂΩïÂ§±Ë¥•ÔºÅÂØÜÁ†ÅÈîôËØØ!':
        msg = 'ÁôªÈôÜÂ§±Ë¥•ÔºåÂéüÂõ†ÔºöÂØÜÁ†ÅÈîôËØØ'
    else:
        msg = message
    return msg


def get_studentInformation():
    headers = {
        'User-Agent': UserAgent
    }
    url = f"{baseUrl}user/info"
    response = session.get(url=url, headers=headers)
    content = response.json()['object']
    ServerTime = content['serverTime']
    UserId = content['userId']
    Name = content['name']
    SchoolName = content['schoolName']
    SchoolNumber = content['number']
    return ServerTime, UserId, Name, SchoolName, SchoolNumber


def get_courseId(serverTime, userId):
    string = 'clientTimediResUpageNopageSizestatus'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    url = f'{baseUrl}course/stuCourseList?pageNo=1&pageSize=8&status=1' + extraUrl
    response = session.get(url=url, headers=headers)
    content = response.json()['items']
    m = len(content)
    return content, m


def get_courseInformation(courseId, serverTime, userId):
    string = 'clientTimecourseIddiResUstuId'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    url = f'{baseUrl}course/studyTeaStuView?courseId=' + courseId + '&stuId=' + userId + extraUrl
    response = session.get(url=url, headers=headers)
    content = response.json()['object']
    return content


def RUN(courseId, serverTime, userId):
    string = 'clientTimediResUid'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    url = f'{baseUrl}course/catalogZorroListForStu?id=' + courseId + extraUrl
    response = session.get(url=url, headers=headers)
    content = response.json()['object']['children']
    return content


def get_pageId_stuKey(i, courseId, serverTime, userId):
    key = i['children'][0]['children'][0]['key']
    string = 'clientTimediResUidkey'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    url = f'{baseUrl}course/catalogZorroListForStuForStudySingleUnit?id=' + courseId + '&key=' + key + extraUrl
    response = session.get(url=url, headers=headers)
    content = response.json()['object']['children']
    return content


def add_time(pageId, stuKey, courseId, serverTime, userId):
    string = 'clientTimecourseIddiResUpageIdstuKey'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    d = '&pageId=' + pageId + '&stuKey=' + stuKey
    url = f'{baseUrl}course/studyTimeCountNew?courseId=' + courseId + d + extraUrl
    response = session.get(url=url, headers=headers)
    content = response.json()
    message = content['message']
    return message


def get_answer(pageId, stuKey, courseId, serverTime, userId):
    string = 'clientTimecourseIddiResUpageId'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    url = f'{baseUrl}textbook/pageDetail?pageId=' + pageId + '&courseId=' + courseId + extraUrl
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    response = session.get(url=url, headers=headers)
    try:
        content = response.json()['object']['item']['object']
        Type = content['type']
        doRecord = {"type": Type, "answer": {}}
        if Type == 1 or Type == 2 or Type == 6 or Type == 20:
            doRecord = Type1_2_6_20(content)
        elif Type == 3 or Type == 5 or Type == 17:
            doRecord = Type3_5_17(content)
        elif Type == 4:
            doRecord = Type4(content)
        elif Type == 8:
            doRecord = Type8()
        elif Type == 9:
            doRecord = Type9(content, doRecord, userId)
        elif Type == 10 or Type == 11 or Type == 12:
            doRecord = Type10_11_12(Type, content, doRecord)
        elif Type == 14 or Type == 15:
            doRecord = Type14_15(content, doRecord, userId)
        elif Type == 18:
            doRecord = Type18(content, userId)
        elif Type == 19:
            doRecord = Type19(content, doRecord)
        elif Type == 22:
            doRecord = Type22(content, doRecord)
        elif Type == 25:
            doRecord = Type25(content, doRecord, userId)
    except:
        try:
            title = response.json()['object']['title']
            if 'UNIT' in title:
                pass
            else:
                pass
                do_read(pageId, stuKey, courseId, serverTime, userId)
        except:
            pass
        doRecord = {"type": 0, "answer": {}}
    return doRecord


def submit(pageId, stuKey, courseId, serverTime, userId):
    string = 'clientTimediResUpageId'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    doRecord = get_answer(pageId, stuKey, courseId, serverTime, userId)
    if doRecord == {"type": 0, "answer": {}}:
        msg = 'Á≠îÊ°àÊèê‰∫§ÊàêÂäü!!!'
    else:
        headers = {
            'User-Agent': UserAgent,
            'sign': sign
        }
        url = f'{baseUrl}exercise/submit?pageId=' + pageId + extraUrl
        data = {"pageId": pageId, "courseId": int(courseId), "doRecord": doRecord}
        response = session.put(url=url, headers=headers, json=data)
        content = response.json()
        if 'Êèê‰∫§ÊàêÂäü!' == content['message']:
            msg = 'Á≠îÊ°àÊèê‰∫§ÊàêÂäü!!!'
        else:
            msg = f'Á≠îÊ°àÊèê‰∫§Â§±Ë¥•ÔºåÂ§±Ë¥•ÂéüÂõ†Ôºö{content}'
    return msg


def Type1_2_6_20(content):
    answer = content['answer']
    Type = content['type']
    doRecord = {"answer": answer, "type": Type}
    return doRecord


def Type3_5_17(content):
    Type = content['type']
    FillBlanks = content['fillBlanks']
    doRecord = {"type": Type, "answer": {}}
    for m in FillBlanks:
        AnswerId = m['id']
        standardAnswer = get_standardAnswer(m, Type)
        AnswerId1 = doRecord.setdefault('answer', {})[AnswerId] = {}
        AnswerId1['id'] = AnswerId
        if Type == 3 or Type == 5:
            AnswerId1['content'] = standardAnswer
        elif Type == 17:
            AnswerId1['content'] = m['answer']
    return doRecord


def Type4(content):
    ImgFillBlanks = content['imgFillBlanks']
    doRecord = {"type": 4, "answer": {}}
    for m in ImgFillBlanks:
        AnswerId = m['id']
        standardAnswer = get_standardAnswer(m, 4)
        answerId1 = doRecord.setdefault('answer', {})[AnswerId] = {}
        answerId1['id'] = m['fillBlank']['id']
        answerId1['content'] = standardAnswer
    return doRecord


def Type8():
    token = get_token()
    A = get_secretCode(token)
    resourceId = A[0]
    timestamp = A[1]
    secret_code = A[2]
    doRecord = {"type": 8, "answer": resourceId, "timestamp": timestamp, "secretCode": secret_code}
    return doRecord


def Type9(content, doRecord, userId):
    Z = get_sig_timestamp()
    sig = Z[0]
    timestamp = Z[1]
    SentItems = content['sentItems']
    Token = get_token()
    for m in SentItems:
        doRecord = get_score(m, Token, sig, timestamp, doRecord, userId)
    return doRecord


def Type10_11_12(Type, content, doRecord):
    Drag = content['drag']
    for m in Drag:
        AnswerId = m['id']
        answerId1 = doRecord.setdefault('answer', {})[AnswerId] = {}
        answerId1['id'] = AnswerId
        if Type == 10 or Type == 12:
            answerId1['choiceId'] = m['answer']
        elif Type == 11:
            answerId1['choiceIds'] = m['answer']
    return doRecord


def Type14_15(content, doRecord, userId):
    ExerciseList = content['exerciseList']
    n = 0
    for m in ExerciseList:
        Type = m['type']
        if Type == 1 or Type == 2 or Type == 6 or Type == 20:
            n = Type1_2_6_20(m)
        elif Type == 3 or Type == 5 or Type == 17:
            n = Type3_5_17(m)
        elif Type == 4:
            n = Type4(m)
        elif Type == 8:
            n = Type8()
        elif Type == 9:
            doRecord1 = {"type": Type, "answer": {}}
            n = Type9(m, doRecord1, userId)
        elif Type == 18:
            n = Type18(m, userId)
        elif Type == 19:
            doRecord1 = {"type": Type, "answer": {}}
            n = Type19(m, doRecord1)
        AnswerId = m['id']
        doRecord['answer'][AnswerId] = n
    return doRecord


def Type18(content, userId):
    Z = get_sig_timestamp()
    sig = Z[0]
    timestamp = Z[1]
    roleId = content['roles'][0]['id']
    doRecord = {"answer": {}, "roleId": roleId, "saSentScore": 0, "type": 18}
    SentItems = content['sentItems']
    Token = get_token()
    for m in SentItems:
        RoleId = m['roleId']
        if RoleId == roleId:
            doRecord = get_score(m, Token, sig, timestamp, doRecord, userId)
        else:
            pass
    return doRecord


def Type19(content, doRecord):
    FillBlanks = content['fillBlanks']
    for m in FillBlanks:
        AnswerId = m['id']
        standardAnswer = get_standardAnswer(m, 19)
        answerId1 = doRecord.setdefault('answer', {})[AnswerId] = {}
        answerId1['content'] = standardAnswer
        answerId1['id'] = AnswerId
    return doRecord


def Type22(content, doRecord):
    SentItems = content['sentItems']
    for m in SentItems:
        AnswerId = m['id']
        optionId = m['optionId']
        answerId1 = doRecord.setdefault('answer', {})[AnswerId] = {}
        answerId1['id'] = optionId
        answerId1['score'] = 0
    return doRecord


def Type25(content, doRecord, userId):
    ExerciseList = content['exerciseList']
    n = 0
    for m in ExerciseList:
        Type = m['type']
        if Type == 1 or Type == 2 or Type == 6 or Type == 20:
            n = Type1_2_6_20(m)
        elif Type == 3 or Type == 5 or Type == 17:
            n = Type3_5_17(m)
        elif Type == 4:
            n = Type4(m)
        elif Type == 8:
            n = Type8()
        elif Type == 9:
            doRecord1 = {"type": Type, "answer": {}}
            n = Type9(m, doRecord1, userId)
        elif Type == 18:
            n = Type18(m, userId)
        elif Type == 19:
            doRecord1 = {"type": Type, "answer": {}}
            n = Type19(m, doRecord1)
        AnswerId = m['id']
        doRecord['answer'][AnswerId] = n
    return doRecord


def get_standardAnswer(m, type):
    if type == 4:
        standardAnswer = m['fillBlank']['standardAnswer']
    else:
        standardAnswer = m['standardAnswer']
    if ';' in standardAnswer:
        standardAnswer = str(standardAnswer).split(';')[0]
    elif '/' in standardAnswer:
        standardAnswer = str(standardAnswer).split('/')[0]
    if not standardAnswer:
        standardAnswer = 'Answers will vary.'
    return standardAnswer


def do_read(pageId, stuKey, courseId, serverTime, userId):
    string = 'clientTimecourseIddiResUpageIdstuKey'
    A = get_sign(string, serverTime, userId)
    o = A[0]
    sign = A[1]
    extraUrl = extra_url(o, userId)
    url = baseUrl + 'course/checkSuccess?courseId=' + courseId + '&pageId=' + pageId + '&stuKey=' + stuKey + extraUrl
    headers = {
        'User-Agent': UserAgent,
        'sign': sign
    }
    session.get(url=url, headers=headers)


def get_score(m, Token, sig, timestamp, doRecord, userId):
    Text = m['text']
    Audio = m['audio']
    AnswerId = m['id']
    A = get_ccode_result_audioUrl(Token, Text, Audio, sig, timestamp, userId)
    ccode = A[0]
    result = A[1]
    audioUrl = A[2]
    words = A[3]
    answerId1 = doRecord.setdefault('answer', {})[AnswerId] = {}
    get_answerId(answerId1, result, ccode, audioUrl, words)
    return doRecord


def get_answerId(answerId1, result, ccode, audioUrl, words):
    answerId1['score'] = result['overall']
    answerId1['accuracy'] = result['accuracy']
    answerId1['fluency'] = result['fluency']['overall']
    answerId1['senseGroup'] = result['rhythm']['sense']
    answerId1['speed'] = result['fluency']['speed']
    answerId1['stress'] = result['rhythm']['stress']
    answerId1['integrity'] = result['integrity']
    answerId1['rhythm'] = result['rhythm']['overall']
    answerId1['pron'] = result['pron']
    answerId1['recordAudio'] = 'https://' + audioUrl + '.mp3'
    answerId1['ccode'] = ccode
    answerId1['words'] = words
    result = json.dumps(result)
    result = str(result)
    result = result.replace(' ', '')
    result = result.replace('postprocfailed', 'post proc failed')
    answerId1['result'] = result


def get_token():
    url = f"{baseUrl}resource/getUploadToken"
    response = session.get(url=url)
    content = response.json()
    token = content['object']['token']
    return token


def get_secretCode(token):
    m = str(uuid.uuid4())
    url = 'https://open.izhixue.cn/uploader/auth?token=' + token
    headers = {
        'User-Agent': UserAgent,
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    }
    data = 'type=file&fileName=' + m + '.mp3&UserId=1'
    response = requests.post(url=url, headers=headers, data=data)
    content = response.json()['data']
    resourceId = content['resourceId']
    fileName = content['fileName']
    uploadAuth = content['uploadAuth']
    a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789'
    i = 0
    b = ''
    while i < 16:
        c = random.randint(0, 60)
        b += a[c]
        i += 1
    webkit = b
    headers = {
        'User-Agent': UserAgent,
        'Content-Type': 'multipart/form-data;boundary=----WebKitFormBoundary' + webkit,
        'Content-Length': '654'
    }
    url = 'https://upload.qiniup.com/'
    data = f'''------WebKitFormBoundary{webkit}
Content-Disposition: form-data; name="file"; filename="blob"
Content-Type: audio/mp3

------WebKitFormBoundary{webkit}
Content-Disposition: form-data; name="key"

{fileName}
------WebKitFormBoundary{webkit}
Content-Disposition: form-data; name="token"

{uploadAuth}
------WebKitFormBoundary{webkit}--

'''
    requests.post(url=url, headers=headers, data=data)
    url = 'https://open.izhixue.cn/uploader/finished?token=' + token + '&no_duration=1'
    headers = {
        'User-Agent': UserAgent,
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    }
    data = 'mime=audio/mp3&userId=1&size=49152&id=' + str(resourceId)
    response = requests.post(url=url, headers=headers, data=data)
    content = response.json()['data']
    timestamp = content['timestamp']
    secret_code = content['secret_code']
    return resourceId, timestamp, secret_code


def get_sig_timestamp():
    headers = {
        'User-Agent': UserAgent
    }
    url = f"{baseUrl}speechAssessment/sign?alg=sha1"
    response = session.get(url=url, headers=headers)
    try:
        sig = response.json()['sig']
        timestamp = response.json()['timestamp']
    except KeyError:
        sig = 0
        timestamp = 0
        print(f'sigÂíåtimestampËé∑ÂèñÂ§±Ë¥•ÔºÅÔºÅÔºÅÂ§±Ë¥•ÂéüÂõ†{response}')
        time.sleep(30)
    return sig, timestamp


def get_ccode_result_audioUrl(token, text, audio, sig, timestamp, userId):
    tokenId = get_tokenId()
    audio_name = get_audio_name(token, audio)
    url = 'wss://cloud.chivox.com/en.sent.score/eng.snt.G4.A6.N1?e=0&t=0&version=2'
    ws = create_connection(url)
    message1 = {"sdk": {"version": 16777216, "source": 4, "protocol": "websocket"},
                "app": {"applicationId": "1559186300000010", "sig": sig, "alg": "sha1", "timestamp": timestamp,
                        "userId": "guest"}}
    message1 = json.dumps(message1)
    message2 = {"tokenId": tokenId, "audio": {"audioType": "mp3", "channel": 1, "sampleBytes": 2, "sampleRate": 16000},
                "request": {"coreType": "en.sent.score", "res": "eng.snt.G4.A6.N1", "refText": text,
                            "userId": int(userId), "attachAudioUrl": 1, "sig": sig, "timestamp": timestamp,
                            "duration": 40000, "playNotifyAudio": True}}
    message2 = json.dumps(message2)
    ws.send(message1)
    ws.send(message2)
    with open(audio_name, 'rb') as f:
        f.seek(0)
        p = f.read()
        ws.send_binary(p)
        f.close()
    ws.send_binary(None)
    response = ws.recv()
    response = json.loads(response)
    try:
        ccode = response['ccode']
        result = response['result']
        audioUrl = response['audioUrl']
        details = response['result']['details']
        words = []
        for i in details:
            word = {'score': i['score'], 'type': 1, 'word': i['char']}
            words.append(word)
        audioUrl = audioUrl.replace(':8002', '')
        os.remove('test.mp3')
    except KeyError:
        ccode = 0
        result = 0
        audioUrl = 0
        words = []
        print(f'ccodeÔºåresultÂíåaudioUrlËé∑ÂèñÂ§±Ë¥•ÔºÅÔºÅÔºÅÂ§±Ë¥•ÂéüÂõ†{response}')
        time.sleep(30)
    return ccode, result, audioUrl, words


def get_tokenId():
    tokenId = uuid.uuid4()
    tokenId = str(tokenId).upper()
    tokenId = tokenId.replace('-', '')
    return tokenId


def get_audio_name(token, Audio):
    audio_name = 'test.mp3'
    url = 'https://open.izhixue.cn/resource/web/url?token=' + token + '&resourceId=' + str(Audio)
    response = requests.get(url=url)
    URL = response.json()['data']['PlayAuth']
    response = requests.get(url=URL)
    try:
        music = response.content
        with open(audio_name, 'ab') as file:
            file.write(music)
            file.flush()
    except FileNotFoundError:
        print(f'Èü≥È¢ëÈááÈõÜÂ§±Ë¥•ÔºÅÔºÅÔºÅÂ§±Ë¥•ÂéüÂõ†{response}')
        time.sleep(30)
    return audio_name


class VERIFY:
    def __init__(self, username, secretKey):
        self.username = username
        self.secretKey = secretKey

    def Md5(self, Plaintext):
        plaintext = Plaintext
        m = hashlib.md5()
        m.update(plaintext.encode(encoding='utf-8'))
        cipherText = m.hexdigest()
        secretStr1 = cipherText[4:5]
        secretStr2 = cipherText[1:2]
        secretStr3 = cipherText[3:4]
        secretStr = secretStr1 + secretStr2 + secretStr3
        if secretStr == 'zzh':
            pass
        else:
            cipherText.replace(secretStr1, 'z')
            cipherText.replace(secretStr2, 'z')
            cipherText.replace(secretStr3, 'h')
        return cipherText

    def SHA256(self, plaintext):
        m = hashlib.sha256()
        m.update(plaintext.encode(encoding='utf-8'))
        cipherText = m.hexdigest()
        cipherText = cipherText[0:self.codeNumber]
        return cipherText

    def extraCode(self):
        i = '20000524'
        c = 'ManOnTheRoad'
        u = self.username
        KEY = i + c + u
        key = self.SHA256(KEY)
        return key

    def encode(self, key):
        i = '20200524'
        c = 'MOTR'
        KEY = i + c + key
        SecretKEY = self.Md5(KEY)
        return SecretKEY

    def verify(self):
        if 'WHU' in self.username:
            self.username = self.username.replace('WHU', '')
        length = len(self.username)
        self.codeNumber = int(self.username[length - 3]) + int(self.username[length - 2]) + int(self.username[length - 1])
        i = '20000524'
        c = 'ManOnTheRoad'
        u = self.username
        KEY = i + c + u
        key = self.Md5(KEY)
        SecretKey = self.encode(key) + self.extraCode()
        if SecretKey == self.secretKey:
            verification = True
        else:
            verification = False
        return verification


if __name__ == '__main__':
    session = requests.Session()
    UserAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) ' \
                'Chrome/83.0.4103.116 Safari/537.36 '
    baseUrl = 'https://www.tsinghuaelt.com/tsenglish/'
    app = QtWidgets.QApplication(sys.argv)
    Login_Window = Ui_LoginWindow()
    Login_Window.show()
    sys.exit(app.exec())
